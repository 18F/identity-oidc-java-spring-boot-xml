<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<mvc:annotation-driven />

	<security:global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="authenticationManager">
	</security:global-method-security>

	<security:http auto-config="false" use-expressions="true"
		disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint"
		pattern="/**">

		<security:intercept-url pattern="/" access="permitAll" />
		<security:intercept-url pattern="/home" access="permitAll" />
		<security:intercept-url pattern="/**" access="isAuthenticated()" />

		<security:custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />

		<security:logout logout-success-url="/" />

	</security:http>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<constructor-arg name="loginFormUrl" value="/openid_connect_login" />
	</bean>

	<security:authentication-manager alias="authenticationManager">
		<!-- This wires the OIDC authentication provider into the system -->
		<security:authentication-provider ref="openIdConnectAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider">

	<!-- This default provider will set everyone to have the role "USER". To change this 
		 behavior, wire in a custom OIDCAuthoritiesMapper here  -->
<!-- 
		<property name="authoritiesMapper">
			<bean class="org.mitre.openid.connect.client.NamedAdminAuthoritiesMapper">
				<property name="admins" ref="namedAdmins" />
			</bean>
		</property>
-->

	</bean>


	<!-- 
	  -
	  - Create and configure the MITREid Connect client filter
	  -	
	  -->
	<bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
	
		<!-- This sets the RP to talk only to one IdP -->
		<property name="issuerService">
			<bean class="org.mitre.openid.connect.client.service.impl.StaticSingleIssuerService" id="staticIssuerService">
				<property name="issuer" value="${oidc.issuer:https://mitreid.org/}" />
			</bean>
		</property>
		
		<!-- This tells the RP to dynamically load the IdP's configuration over the web -->
		<property name="serverConfigurationService">
			<bean class="org.mitre.openid.connect.client.service.impl.DynamicServerConfigurationService" id="dynamicServerConfigurationService" />
		</property>
		
		<!-- This tells the RP how to talk to the IdP -->
		<property name="clientConfigurationService">
			<bean class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService" id="staticClientConfigurationService">
				<property name="clients">
					<map>
						<!-- This tells the client to use this configuration when talking to the IdP -->
						<entry key="${oidc.issuer:https://mitreid.org/}">
							<bean class="org.mitre.oauth2.model.RegisteredClient">
							
								<!-- This is the client's unique identifier at the IdP -->
								<property name="clientId" value="${oidc.clientid:login-gov-test-client}" />
								
								<!-- This tells the client to use a signed JWT to authenticate itself
								     note: your keys need to be registered with the IdP -->
								<property name="tokenEndpointAuthMethod" value="PRIVATE_KEY" />
								
								<!-- This tells the client to ask for the standard OpenID Connect scopes -->
								<property name="scope">
									<set value-type="java.lang.String">
										<value>openid</value>
										<value>email</value>
										<value>address</value>
										<value>profile</value>
										<value>phone</value>
									</set>
								</property>
								
								<!-- This tells the client which redirect URIs are valid, configured above.
								     note: it will use only the first one in the set. -->
								<property name="redirectUris">
									<set>
										<value>${oidc.redirecturi:http://localhost:8080/openid_connect_login}</value>
									</set>
								</property>
							</bean>
						</entry>
					</map>
		  		</property>
			</bean>
		</property>
		
		<!-- This tells the client to send no additional options -->
		<property name="authRequestOptionsService">
			<bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService" id="staticAuthRequestOptionsService" />
		</property>
		
		<!-- This tells the client to use a plain HTTP redirect to send its requests -->
		<property name="authRequestUrlBuilder">
			<bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />
		</property>

		<!-- This wires in the authentication manager to the filter -->
		<property name="authenticationManager" ref="authenticationManager" />

	</bean>


	<!-- 
		This creates a component to fetch the public keys of the IdP
	-->
	
	<bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService" />
	
	<!-- 
		This loads the public and private keys for this client from the
	 	JWKS file.
	 -->
	<bean id="defaultSignerService" class="org.mitre.jwt.signer.service.impl.DefaultJWTSigningAndValidationService">
		<constructor-arg name="keyStore">
			<bean id="defaultKeyStore" class="org.mitre.jose.keystore.JWKSetKeyStore">

				<!-- This is the path to the client's public and private keys, in JSON Web Key Set format -->
				<property name="location" value="${oidc.keystorepath:classpath:keystore.jwks}" />

			</bean>
		</constructor-arg>
		
		<!-- This is the key ID of the key used to sign the client's outgoing requests. This key
	 	     must exist in the keystore configured above -->
		<property name="defaultSignerKeyId" value="${oidc.defaultkey:rsa-test-key}" />
 		<property name="defaultSigningAlgorithmName" value="RS256" />
	</bean>

</beans>
